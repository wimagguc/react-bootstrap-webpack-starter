/*
 * Demo API
 * Demo
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Login', 'model/PasswordChange', 'model/PasswordReset', 'model/PasswordResetConfirm', 'model/UserDetails', 'api/LoginApi', 'api/LogoutApi', 'api/PasswordApi', 'api/UserApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Login'), require('./model/PasswordChange'), require('./model/PasswordReset'), require('./model/PasswordResetConfirm'), require('./model/UserDetails'), require('./api/LoginApi'), require('./api/LogoutApi'), require('./api/PasswordApi'), require('./api/UserApi'));
  }
}(function(ApiClient, Login, PasswordChange, PasswordReset, PasswordResetConfirm, UserDetails, LoginApi, LogoutApi, PasswordApi, UserApi) {
  'use strict';

  /**
   * Demo.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var DemoApi = require('index'); // See note below*.
   * var xxxSvc = new DemoApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new DemoApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new DemoApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new DemoApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version v1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Login model constructor.
     * @property {module:model/Login}
     */
    Login: Login,
    /**
     * The PasswordChange model constructor.
     * @property {module:model/PasswordChange}
     */
    PasswordChange: PasswordChange,
    /**
     * The PasswordReset model constructor.
     * @property {module:model/PasswordReset}
     */
    PasswordReset: PasswordReset,
    /**
     * The PasswordResetConfirm model constructor.
     * @property {module:model/PasswordResetConfirm}
     */
    PasswordResetConfirm: PasswordResetConfirm,
    /**
     * The UserDetails model constructor.
     * @property {module:model/UserDetails}
     */
    UserDetails: UserDetails,
    /**
     * The LoginApi service constructor.
     * @property {module:api/LoginApi}
     */
    LoginApi: LoginApi,
    /**
     * The LogoutApi service constructor.
     * @property {module:api/LogoutApi}
     */
    LogoutApi: LogoutApi,
    /**
     * The PasswordApi service constructor.
     * @property {module:api/PasswordApi}
     */
    PasswordApi: PasswordApi,
    /**
     * The UserApi service constructor.
     * @property {module:api/UserApi}
     */
    UserApi: UserApi
  };

  return exports;
}));
