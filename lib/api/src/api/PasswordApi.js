/*
 * Demo API
 * Demo
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PasswordChange', 'model/PasswordReset', 'model/PasswordResetConfirm'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PasswordChange'), require('../model/PasswordReset'), require('../model/PasswordResetConfirm'));
  } else {
    // Browser globals (root is window)
    if (!root.DemoApi) {
      root.DemoApi = {};
    }
    root.DemoApi.PasswordApi = factory(root.DemoApi.ApiClient, root.DemoApi.PasswordChange, root.DemoApi.PasswordReset, root.DemoApi.PasswordResetConfirm);
  }
}(this, function(ApiClient, PasswordChange, PasswordReset, PasswordResetConfirm) {
  'use strict';

  /**
   * Password service.
   * @module api/PasswordApi
   * @version v1
   */

  /**
   * Constructs a new PasswordApi. 
   * @alias module:api/PasswordApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the passwordChangeCreate operation.
     * @callback module:api/PasswordApi~passwordChangeCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordChange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calls Django Auth SetPasswordForm save method.
     * Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     * @param {module:model/PasswordChange} data 
     * @param {module:api/PasswordApi~passwordChangeCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordChange}
     */
    this.passwordChangeCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling passwordChangeCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PasswordChange;

      return this.apiClient.callApi(
        '/password/change/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordResetConfirmCreate operation.
     * @callback module:api/PasswordApi~passwordResetConfirmCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordResetConfirm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Password reset e-mail link is confirmed, therefore this resets the user's password.
     * Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
     * @param {module:model/PasswordResetConfirm} data 
     * @param {module:api/PasswordApi~passwordResetConfirmCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordResetConfirm}
     */
    this.passwordResetConfirmCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling passwordResetConfirmCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PasswordResetConfirm;

      return this.apiClient.callApi(
        '/password/reset/confirm/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordResetCreate operation.
     * @callback module:api/PasswordApi~passwordResetCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordReset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calls Django Auth PasswordResetForm save method.
     * Accepts the following POST parameters: email Returns the success/fail message.
     * @param {module:model/PasswordReset} data 
     * @param {module:api/PasswordApi~passwordResetCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordReset}
     */
    this.passwordResetCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling passwordResetCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PasswordReset;

      return this.apiClient.callApi(
        '/password/reset/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
